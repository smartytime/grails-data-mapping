Unlike a relational database, Mongo allows for "schemaless" persistence where there are no limits to the number of attributes a particular document can have. A GORM domain class on the other hand has a schema in that there are a fixed number of properties. For example consider the following domain class:

{code}
class Plant {
    boolean goesInPatch
    String name
}
{code}

Here there are two fixed properties, @name@ and @goesInPatch@, that will be persisted into the Mongo document. Using GORM for Mongo you can however use dynamic properties via the Groovy subscript operator. For example:

{code}
def p = new Plant(name:"Pineapple")
p['color'] = 'Yellow'
p['hasLeaves'] = true
p.save()

p = Plant.findByName("Pineapple")

println p['color']
println p['hasLeaves']
{code}

Using the subscript operator you can add additional attributes to the underlying @DBObject@ instance that gets persisted to the Mongo allowing for more dynamic domain models. 